/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChannelService_H
#define ChannelService_H

#include <thrift/TDispatchProcessor.h>
#include "result_types.h"

namespace ytx {

class ChannelServiceIf {
 public:
  virtual ~ChannelServiceIf() {}
  virtual void getChannelsByUserId(ChannelList& _return, const std::string& userId) = 0;
  virtual void subscribeChannel(const std::string& userId, const std::string& channelId) = 0;
  virtual void unsubscribeChannel(const std::string& userId, const std::string& channelId) = 0;
  virtual void createContentChannel(Channel& _return, const int32_t contentId) = 0;
  virtual void removeChannel(const std::string& channelId) = 0;
  virtual void addAdminIntoChannel(const std::string& channelId, const UserIdList& userIds) = 0;
  virtual void removeAdminFromChannel(const std::string& channelId, const UserIdList& userIds) = 0;
};

class ChannelServiceIfFactory {
 public:
  typedef ChannelServiceIf Handler;

  virtual ~ChannelServiceIfFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChannelServiceIf* /* handler */) = 0;
};

class ChannelServiceIfSingletonFactory : virtual public ChannelServiceIfFactory {
 public:
  ChannelServiceIfSingletonFactory(const boost::shared_ptr<ChannelServiceIf>& iface) : iface_(iface) {}
  virtual ~ChannelServiceIfSingletonFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChannelServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChannelServiceIf> iface_;
};

class ChannelServiceNull : virtual public ChannelServiceIf {
 public:
  virtual ~ChannelServiceNull() {}
  void getChannelsByUserId(ChannelList& /* _return */, const std::string& /* userId */) {
    return;
  }
  void subscribeChannel(const std::string& /* userId */, const std::string& /* channelId */) {
    return;
  }
  void unsubscribeChannel(const std::string& /* userId */, const std::string& /* channelId */) {
    return;
  }
  void createContentChannel(Channel& /* _return */, const int32_t /* contentId */) {
    return;
  }
  void removeChannel(const std::string& /* channelId */) {
    return;
  }
  void addAdminIntoChannel(const std::string& /* channelId */, const UserIdList& /* userIds */) {
    return;
  }
  void removeAdminFromChannel(const std::string& /* channelId */, const UserIdList& /* userIds */) {
    return;
  }
};

typedef struct _ChannelService_getChannelsByUserId_args__isset {
  _ChannelService_getChannelsByUserId_args__isset() : userId(false) {}
  bool userId;
} _ChannelService_getChannelsByUserId_args__isset;

class ChannelService_getChannelsByUserId_args {
 public:

  ChannelService_getChannelsByUserId_args() : userId() {
  }

  virtual ~ChannelService_getChannelsByUserId_args() throw() {}

  std::string userId;

  _ChannelService_getChannelsByUserId_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChannelService_getChannelsByUserId_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelsByUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelsByUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getChannelsByUserId_pargs {
 public:


  virtual ~ChannelService_getChannelsByUserId_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelsByUserId_result__isset {
  _ChannelService_getChannelsByUserId_result__isset() : success(false) {}
  bool success;
} _ChannelService_getChannelsByUserId_result__isset;

class ChannelService_getChannelsByUserId_result {
 public:

  ChannelService_getChannelsByUserId_result() {
  }

  virtual ~ChannelService_getChannelsByUserId_result() throw() {}

  ChannelList success;

  _ChannelService_getChannelsByUserId_result__isset __isset;

  void __set_success(const ChannelList& val) {
    success = val;
  }

  bool operator == (const ChannelService_getChannelsByUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getChannelsByUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getChannelsByUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getChannelsByUserId_presult__isset {
  _ChannelService_getChannelsByUserId_presult__isset() : success(false) {}
  bool success;
} _ChannelService_getChannelsByUserId_presult__isset;

class ChannelService_getChannelsByUserId_presult {
 public:


  virtual ~ChannelService_getChannelsByUserId_presult() throw() {}

  ChannelList* success;

  _ChannelService_getChannelsByUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_subscribeChannel_args__isset {
  _ChannelService_subscribeChannel_args__isset() : userId(false), channelId(false) {}
  bool userId;
  bool channelId;
} _ChannelService_subscribeChannel_args__isset;

class ChannelService_subscribeChannel_args {
 public:

  ChannelService_subscribeChannel_args() : userId(), channelId() {
  }

  virtual ~ChannelService_subscribeChannel_args() throw() {}

  std::string userId;
  std::string channelId;

  _ChannelService_subscribeChannel_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const ChannelService_subscribeChannel_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_subscribeChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_subscribeChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_subscribeChannel_pargs {
 public:


  virtual ~ChannelService_subscribeChannel_pargs() throw() {}

  const std::string* userId;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_subscribeChannel_result {
 public:

  ChannelService_subscribeChannel_result() {
  }

  virtual ~ChannelService_subscribeChannel_result() throw() {}


  bool operator == (const ChannelService_subscribeChannel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_subscribeChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_subscribeChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_subscribeChannel_presult {
 public:


  virtual ~ChannelService_subscribeChannel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_unsubscribeChannel_args__isset {
  _ChannelService_unsubscribeChannel_args__isset() : userId(false), channelId(false) {}
  bool userId;
  bool channelId;
} _ChannelService_unsubscribeChannel_args__isset;

class ChannelService_unsubscribeChannel_args {
 public:

  ChannelService_unsubscribeChannel_args() : userId(), channelId() {
  }

  virtual ~ChannelService_unsubscribeChannel_args() throw() {}

  std::string userId;
  std::string channelId;

  _ChannelService_unsubscribeChannel_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const ChannelService_unsubscribeChannel_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_unsubscribeChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_unsubscribeChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_unsubscribeChannel_pargs {
 public:


  virtual ~ChannelService_unsubscribeChannel_pargs() throw() {}

  const std::string* userId;
  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_unsubscribeChannel_result {
 public:

  ChannelService_unsubscribeChannel_result() {
  }

  virtual ~ChannelService_unsubscribeChannel_result() throw() {}


  bool operator == (const ChannelService_unsubscribeChannel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_unsubscribeChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_unsubscribeChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_unsubscribeChannel_presult {
 public:


  virtual ~ChannelService_unsubscribeChannel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_createContentChannel_args__isset {
  _ChannelService_createContentChannel_args__isset() : contentId(false) {}
  bool contentId;
} _ChannelService_createContentChannel_args__isset;

class ChannelService_createContentChannel_args {
 public:

  ChannelService_createContentChannel_args() : contentId(0) {
  }

  virtual ~ChannelService_createContentChannel_args() throw() {}

  int32_t contentId;

  _ChannelService_createContentChannel_args__isset __isset;

  void __set_contentId(const int32_t val) {
    contentId = val;
  }

  bool operator == (const ChannelService_createContentChannel_args & rhs) const
  {
    if (!(contentId == rhs.contentId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_createContentChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_createContentChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_createContentChannel_pargs {
 public:


  virtual ~ChannelService_createContentChannel_pargs() throw() {}

  const int32_t* contentId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_createContentChannel_result__isset {
  _ChannelService_createContentChannel_result__isset() : success(false) {}
  bool success;
} _ChannelService_createContentChannel_result__isset;

class ChannelService_createContentChannel_result {
 public:

  ChannelService_createContentChannel_result() {
  }

  virtual ~ChannelService_createContentChannel_result() throw() {}

  Channel success;

  _ChannelService_createContentChannel_result__isset __isset;

  void __set_success(const Channel& val) {
    success = val;
  }

  bool operator == (const ChannelService_createContentChannel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_createContentChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_createContentChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_createContentChannel_presult__isset {
  _ChannelService_createContentChannel_presult__isset() : success(false) {}
  bool success;
} _ChannelService_createContentChannel_presult__isset;

class ChannelService_createContentChannel_presult {
 public:


  virtual ~ChannelService_createContentChannel_presult() throw() {}

  Channel* success;

  _ChannelService_createContentChannel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_removeChannel_args__isset {
  _ChannelService_removeChannel_args__isset() : channelId(false) {}
  bool channelId;
} _ChannelService_removeChannel_args__isset;

class ChannelService_removeChannel_args {
 public:

  ChannelService_removeChannel_args() : channelId() {
  }

  virtual ~ChannelService_removeChannel_args() throw() {}

  std::string channelId;

  _ChannelService_removeChannel_args__isset __isset;

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  bool operator == (const ChannelService_removeChannel_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    return true;
  }
  bool operator != (const ChannelService_removeChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_removeChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeChannel_pargs {
 public:


  virtual ~ChannelService_removeChannel_pargs() throw() {}

  const std::string* channelId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeChannel_result {
 public:

  ChannelService_removeChannel_result() {
  }

  virtual ~ChannelService_removeChannel_result() throw() {}


  bool operator == (const ChannelService_removeChannel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_removeChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_removeChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeChannel_presult {
 public:


  virtual ~ChannelService_removeChannel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_addAdminIntoChannel_args__isset {
  _ChannelService_addAdminIntoChannel_args__isset() : channelId(false), userIds(false) {}
  bool channelId;
  bool userIds;
} _ChannelService_addAdminIntoChannel_args__isset;

class ChannelService_addAdminIntoChannel_args {
 public:

  ChannelService_addAdminIntoChannel_args() : channelId() {
  }

  virtual ~ChannelService_addAdminIntoChannel_args() throw() {}

  std::string channelId;
  UserIdList userIds;

  _ChannelService_addAdminIntoChannel_args__isset __isset;

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_userIds(const UserIdList& val) {
    userIds = val;
  }

  bool operator == (const ChannelService_addAdminIntoChannel_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(userIds == rhs.userIds))
      return false;
    return true;
  }
  bool operator != (const ChannelService_addAdminIntoChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_addAdminIntoChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_addAdminIntoChannel_pargs {
 public:


  virtual ~ChannelService_addAdminIntoChannel_pargs() throw() {}

  const std::string* channelId;
  const UserIdList* userIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_addAdminIntoChannel_result {
 public:

  ChannelService_addAdminIntoChannel_result() {
  }

  virtual ~ChannelService_addAdminIntoChannel_result() throw() {}


  bool operator == (const ChannelService_addAdminIntoChannel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_addAdminIntoChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_addAdminIntoChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_addAdminIntoChannel_presult {
 public:


  virtual ~ChannelService_addAdminIntoChannel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_removeAdminFromChannel_args__isset {
  _ChannelService_removeAdminFromChannel_args__isset() : channelId(false), userIds(false) {}
  bool channelId;
  bool userIds;
} _ChannelService_removeAdminFromChannel_args__isset;

class ChannelService_removeAdminFromChannel_args {
 public:

  ChannelService_removeAdminFromChannel_args() : channelId() {
  }

  virtual ~ChannelService_removeAdminFromChannel_args() throw() {}

  std::string channelId;
  UserIdList userIds;

  _ChannelService_removeAdminFromChannel_args__isset __isset;

  void __set_channelId(const std::string& val) {
    channelId = val;
  }

  void __set_userIds(const UserIdList& val) {
    userIds = val;
  }

  bool operator == (const ChannelService_removeAdminFromChannel_args & rhs) const
  {
    if (!(channelId == rhs.channelId))
      return false;
    if (!(userIds == rhs.userIds))
      return false;
    return true;
  }
  bool operator != (const ChannelService_removeAdminFromChannel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_removeAdminFromChannel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeAdminFromChannel_pargs {
 public:


  virtual ~ChannelService_removeAdminFromChannel_pargs() throw() {}

  const std::string* channelId;
  const UserIdList* userIds;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeAdminFromChannel_result {
 public:

  ChannelService_removeAdminFromChannel_result() {
  }

  virtual ~ChannelService_removeAdminFromChannel_result() throw() {}


  bool operator == (const ChannelService_removeAdminFromChannel_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_removeAdminFromChannel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_removeAdminFromChannel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_removeAdminFromChannel_presult {
 public:


  virtual ~ChannelService_removeAdminFromChannel_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChannelServiceClient : virtual public ChannelServiceIf {
 public:
  ChannelServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChannelServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getChannelsByUserId(ChannelList& _return, const std::string& userId);
  void send_getChannelsByUserId(const std::string& userId);
  void recv_getChannelsByUserId(ChannelList& _return);
  void subscribeChannel(const std::string& userId, const std::string& channelId);
  void send_subscribeChannel(const std::string& userId, const std::string& channelId);
  void recv_subscribeChannel();
  void unsubscribeChannel(const std::string& userId, const std::string& channelId);
  void send_unsubscribeChannel(const std::string& userId, const std::string& channelId);
  void recv_unsubscribeChannel();
  void createContentChannel(Channel& _return, const int32_t contentId);
  void send_createContentChannel(const int32_t contentId);
  void recv_createContentChannel(Channel& _return);
  void removeChannel(const std::string& channelId);
  void send_removeChannel(const std::string& channelId);
  void recv_removeChannel();
  void addAdminIntoChannel(const std::string& channelId, const UserIdList& userIds);
  void send_addAdminIntoChannel(const std::string& channelId, const UserIdList& userIds);
  void recv_addAdminIntoChannel();
  void removeAdminFromChannel(const std::string& channelId, const UserIdList& userIds);
  void send_removeAdminFromChannel(const std::string& channelId, const UserIdList& userIds);
  void recv_removeAdminFromChannel();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChannelServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChannelServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChannelServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getChannelsByUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribeChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsubscribeChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createContentChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addAdminIntoChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeAdminFromChannel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChannelServiceProcessor(boost::shared_ptr<ChannelServiceIf> iface) :
    iface_(iface) {
    processMap_["getChannelsByUserId"] = &ChannelServiceProcessor::process_getChannelsByUserId;
    processMap_["subscribeChannel"] = &ChannelServiceProcessor::process_subscribeChannel;
    processMap_["unsubscribeChannel"] = &ChannelServiceProcessor::process_unsubscribeChannel;
    processMap_["createContentChannel"] = &ChannelServiceProcessor::process_createContentChannel;
    processMap_["removeChannel"] = &ChannelServiceProcessor::process_removeChannel;
    processMap_["addAdminIntoChannel"] = &ChannelServiceProcessor::process_addAdminIntoChannel;
    processMap_["removeAdminFromChannel"] = &ChannelServiceProcessor::process_removeAdminFromChannel;
  }

  virtual ~ChannelServiceProcessor() {}
};

class ChannelServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChannelServiceProcessorFactory(const ::boost::shared_ptr< ChannelServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChannelServiceIfFactory > handlerFactory_;
};

class ChannelServiceMultiface : virtual public ChannelServiceIf {
 public:
  ChannelServiceMultiface(std::vector<boost::shared_ptr<ChannelServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChannelServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChannelServiceIf> > ifaces_;
  ChannelServiceMultiface() {}
  void add(boost::shared_ptr<ChannelServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getChannelsByUserId(ChannelList& _return, const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChannelsByUserId(_return, userId);
    }
    ifaces_[i]->getChannelsByUserId(_return, userId);
    return;
  }

  void subscribeChannel(const std::string& userId, const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribeChannel(userId, channelId);
    }
    ifaces_[i]->subscribeChannel(userId, channelId);
  }

  void unsubscribeChannel(const std::string& userId, const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsubscribeChannel(userId, channelId);
    }
    ifaces_[i]->unsubscribeChannel(userId, channelId);
  }

  void createContentChannel(Channel& _return, const int32_t contentId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createContentChannel(_return, contentId);
    }
    ifaces_[i]->createContentChannel(_return, contentId);
    return;
  }

  void removeChannel(const std::string& channelId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeChannel(channelId);
    }
    ifaces_[i]->removeChannel(channelId);
  }

  void addAdminIntoChannel(const std::string& channelId, const UserIdList& userIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addAdminIntoChannel(channelId, userIds);
    }
    ifaces_[i]->addAdminIntoChannel(channelId, userIds);
  }

  void removeAdminFromChannel(const std::string& channelId, const UserIdList& userIds) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeAdminFromChannel(channelId, userIds);
    }
    ifaces_[i]->removeAdminFromChannel(channelId, userIds);
  }

};

} // namespace

#endif
