// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ChannelService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ytx;

class ChannelServiceHandler : virtual public ChannelServiceIf {
 public:
  ChannelServiceHandler() {
    // Your initialization goes here
  }

  void getChannelsByUserId(ChannelList& _return, const std::string& userId) {
    // Your implementation goes here
    printf("getChannelsByUserId\n");
  }

  void subscribeChannel(const std::string& userId, const std::string& channelId) {
    // Your implementation goes here
    printf("subscribeChannel\n");
  }

  void unsubscribeChannel(const std::string& userId, const std::string& channelId) {
    // Your implementation goes here
    printf("unsubscribeChannel\n");
  }

  void createContentChannel(Channel& _return, const int32_t contentId) {
    // Your implementation goes here
    printf("createContentChannel\n");
  }

  void removeChannel(const std::string& channelId) {
    // Your implementation goes here
    printf("removeChannel\n");
  }

  void addAdminIntoChannel(const std::string& channelId, const UserIdList& userIds) {
    // Your implementation goes here
    printf("addAdminIntoChannel\n");
  }

  void removeAdminFromChannel(const std::string& channelId, const UserIdList& userIds) {
    // Your implementation goes here
    printf("removeAdminFromChannel\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ChannelServiceHandler> handler(new ChannelServiceHandler());
  shared_ptr<TProcessor> processor(new ChannelServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

