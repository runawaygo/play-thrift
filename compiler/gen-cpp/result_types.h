/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef result_TYPES_H
#define result_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace ytx {

typedef std::vector<class Channel>  ChannelList;

typedef std::vector<std::string>  UserIdList;

typedef struct _Channel__isset {
  _Channel__isset() : id(false), name(false) {}
  bool id;
  bool name;
} _Channel__isset;

class Channel {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Channel() : id(), name() {
  }

  virtual ~Channel() throw() {}

  std::string id;
  std::string name;

  _Channel__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const Channel & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Channel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Channel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Channel &a, Channel &b);

} // namespace

#endif
