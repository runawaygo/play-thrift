//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./result_types');
//HELPER FUNCTIONS AND STRUCTURES

ytx.ChatService_getChannelsByUserId_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ytx.ChatService_getChannelsByUserId_args.prototype = {};
ytx.ChatService_getChannelsByUserId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChannelsByUserId_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChannelsByUserId_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getChannelsByUserId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ytx.ChatService_getChannelsByUserId_result.prototype = {};
ytx.ChatService_getChannelsByUserId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Channel();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChannelsByUserId_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChannelsByUserId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getChannelsUpdate_args = function(args) {
  this.userId = null;
  this.lastUpdateTime = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
  }
};
ytx.ChatService_getChannelsUpdate_args.prototype = {};
ytx.ChatService_getChannelsUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChannelsUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChannelsUpdate_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.I32, 2);
    output.writeI32(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getChannelsUpdate_result = function(args) {
};
ytx.ChatService_getChannelsUpdate_result.prototype = {};
ytx.ChatService_getChannelsUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChannelsUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChannelsUpdate_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_subscribe_args = function(args) {
  this.channelId = null;
  this.userId = null;
  if (args) {
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ytx.ChatService_subscribe_args.prototype = {};
ytx.ChatService_subscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_subscribe_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_subscribe_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_subscribe_result = function(args) {
};
ytx.ChatService_subscribe_result.prototype = {};
ytx.ChatService_subscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_subscribe_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_subscribe_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_unsubscribe_args = function(args) {
  this.channelId = null;
  this.userId = null;
  if (args) {
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
ytx.ChatService_unsubscribe_args.prototype = {};
ytx.ChatService_unsubscribe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_unsubscribe_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_unsubscribe_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_unsubscribe_result = function(args) {
};
ytx.ChatService_unsubscribe_result.prototype = {};
ytx.ChatService_unsubscribe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_unsubscribe_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_unsubscribe_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_sendContent_args = function(args) {
  this.channelId = null;
  this.contentId = null;
  if (args) {
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
    if (args.contentId !== undefined) {
      this.contentId = args.contentId;
    }
  }
};
ytx.ChatService_sendContent_args.prototype = {};
ytx.ChatService_sendContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_sendContent_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_sendContent_args');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.I32, 2);
    output.writeI32(this.contentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_sendContent_result = function(args) {
};
ytx.ChatService_sendContent_result.prototype = {};
ytx.ChatService_sendContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_sendContent_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_sendContent_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getChatHistory_args = function(args) {
  this.userId = null;
  this.channelId = null;
  this.lastUpdateTime = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
    if (args.lastUpdateTime !== undefined) {
      this.lastUpdateTime = args.lastUpdateTime;
    }
  }
};
ytx.ChatService_getChatHistory_args.prototype = {};
ytx.ChatService_getChatHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdateTime = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChatHistory_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChatHistory_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastUpdateTime !== null && this.lastUpdateTime !== undefined) {
    output.writeFieldBegin('lastUpdateTime', Thrift.Type.I32, 3);
    output.writeI32(this.lastUpdateTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getChatHistory_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ytx.ChatService_getChatHistory_result.prototype = {};
ytx.ChatService_getChatHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Message();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getChatHistory_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getChatHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getServedAdmins_args = function(args) {
  this.userId = null;
  this.channelId = 'superwolf';
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
  }
};
ytx.ChatService_getServedAdmins_args.prototype = {};
ytx.ChatService_getServedAdmins_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getServedAdmins_args.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getServedAdmins_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatService_getServedAdmins_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ytx.ChatService_getServedAdmins_result.prototype = {};
ytx.ChatService_getServedAdmins_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.ChatService_getServedAdmins_result.prototype.write = function(output) {
  output.writeStructBegin('ChatService_getServedAdmins_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.ChatServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
ytx.ChatServiceClient.prototype = {};
ytx.ChatServiceClient.prototype.getChannelsByUserId = function(userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getChannelsByUserId(userId);
};

ytx.ChatServiceClient.prototype.send_getChannelsByUserId = function(userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannelsByUserId', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_getChannelsByUserId_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_getChannelsByUserId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_getChannelsByUserId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChannelsByUserId failed: unknown result');
};
ytx.ChatServiceClient.prototype.getChannelsUpdate = function(userId, lastUpdateTime, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getChannelsUpdate(userId, lastUpdateTime);
};

ytx.ChatServiceClient.prototype.send_getChannelsUpdate = function(userId, lastUpdateTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChannelsUpdate', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_getChannelsUpdate_args();
  args.userId = userId;
  args.lastUpdateTime = lastUpdateTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_getChannelsUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_getChannelsUpdate_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ytx.ChatServiceClient.prototype.subscribe = function(channelId, userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_subscribe(channelId, userId);
};

ytx.ChatServiceClient.prototype.send_subscribe = function(channelId, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subscribe', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_subscribe_args();
  args.channelId = channelId;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_subscribe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_subscribe_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ytx.ChatServiceClient.prototype.unsubscribe = function(channelId, userId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_unsubscribe(channelId, userId);
};

ytx.ChatServiceClient.prototype.send_unsubscribe = function(channelId, userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('unsubscribe', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_unsubscribe_args();
  args.channelId = channelId;
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_unsubscribe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_unsubscribe_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ytx.ChatServiceClient.prototype.sendContent = function(channelId, contentId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_sendContent(channelId, contentId);
};

ytx.ChatServiceClient.prototype.send_sendContent = function(channelId, contentId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendContent', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_sendContent_args();
  args.channelId = channelId;
  args.contentId = contentId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_sendContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_sendContent_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
ytx.ChatServiceClient.prototype.getChatHistory = function(userId, channelId, lastUpdateTime, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getChatHistory(userId, channelId, lastUpdateTime);
};

ytx.ChatServiceClient.prototype.send_getChatHistory = function(userId, channelId, lastUpdateTime) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getChatHistory', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_getChatHistory_args();
  args.userId = userId;
  args.channelId = channelId;
  args.lastUpdateTime = lastUpdateTime;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_getChatHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_getChatHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getChatHistory failed: unknown result');
};
ytx.ChatServiceClient.prototype.getServedAdmins = function(userId, channelId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getServedAdmins(userId, channelId);
};

ytx.ChatServiceClient.prototype.send_getServedAdmins = function(userId, channelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServedAdmins', Thrift.MessageType.CALL, this.seqid);
  var args = new ytx.ChatService_getServedAdmins_args();
  args.userId = userId;
  args.channelId = channelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ytx.ChatServiceClient.prototype.recv_getServedAdmins = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ytx.ChatService_getServedAdmins_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServedAdmins failed: unknown result');
};
ytx.ChatServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ytx.ChatServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ytx.ChatServiceProcessor.prototype.process_getChannelsByUserId = function(seqid, input, output) {
  var args = new ytx.ChatService_getChannelsByUserId_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getChannelsByUserId(args.userId, function (err, result) {
    var result = new ytx.ChatService_getChannelsByUserId_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getChannelsByUserId", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_getChannelsUpdate = function(seqid, input, output) {
  var args = new ytx.ChatService_getChannelsUpdate_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getChannelsUpdate(args.userId, args.lastUpdateTime, function (err, result) {
    var result = new ytx.ChatService_getChannelsUpdate_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getChannelsUpdate", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_subscribe = function(seqid, input, output) {
  var args = new ytx.ChatService_subscribe_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.subscribe(args.channelId, args.userId, function (err, result) {
    var result = new ytx.ChatService_subscribe_result((err != null ? err : {success: result}));
    output.writeMessageBegin("subscribe", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_unsubscribe = function(seqid, input, output) {
  var args = new ytx.ChatService_unsubscribe_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.unsubscribe(args.channelId, args.userId, function (err, result) {
    var result = new ytx.ChatService_unsubscribe_result((err != null ? err : {success: result}));
    output.writeMessageBegin("unsubscribe", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_sendContent = function(seqid, input, output) {
  var args = new ytx.ChatService_sendContent_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.sendContent(args.channelId, args.contentId, function (err, result) {
    var result = new ytx.ChatService_sendContent_result((err != null ? err : {success: result}));
    output.writeMessageBegin("sendContent", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_getChatHistory = function(seqid, input, output) {
  var args = new ytx.ChatService_getChatHistory_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getChatHistory(args.userId, args.channelId, args.lastUpdateTime, function (err, result) {
    var result = new ytx.ChatService_getChatHistory_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getChatHistory", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

ytx.ChatServiceProcessor.prototype.process_getServedAdmins = function(seqid, input, output) {
  var args = new ytx.ChatService_getServedAdmins_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getServedAdmins(args.userId, args.channelId, function (err, result) {
    var result = new ytx.ChatService_getServedAdmins_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getServedAdmins", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

