//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
if (typeof ytx === 'undefined') {
  ytx = {};
}
ytx.Channel = module.exports.Channel = function(args) {
  this.id = null;
  this.name = null;
  this.type = null;
  this.description = null;
  this.memberCount = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.memberCount !== undefined) {
      this.memberCount = args.memberCount;
    }
  }
};
ytx.Channel.prototype = {};
ytx.Channel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.memberCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.Channel.prototype.write = function(output) {
  output.writeStructBegin('Channel');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I32, 5);
    output.writeI32(this.memberCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ytx.Message = module.exports.Message = function(args) {
  this.id = null;
  this.type = null;
  this.channelId = null;
  this.channelName = null;
  this.datetime = null;
  this.content = null;
  this.fromUserId = null;
  this.fromUsername = null;
  this.toUserId = null;
  this.toUsername = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.channelId !== undefined) {
      this.channelId = args.channelId;
    }
    if (args.channelName !== undefined) {
      this.channelName = args.channelName;
    }
    if (args.datetime !== undefined) {
      this.datetime = args.datetime;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.fromUserId !== undefined) {
      this.fromUserId = args.fromUserId;
    }
    if (args.fromUsername !== undefined) {
      this.fromUsername = args.fromUsername;
    }
    if (args.toUserId !== undefined) {
      this.toUserId = args.toUserId;
    }
    if (args.toUsername !== undefined) {
      this.toUsername = args.toUsername;
    }
  }
};
ytx.Message.prototype = {};
ytx.Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.channelName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.datetime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.fromUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fromUsername = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.toUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.toUsername = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ytx.Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 3);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.channelName !== null && this.channelName !== undefined) {
    output.writeFieldBegin('channelName', Thrift.Type.STRING, 4);
    output.writeString(this.channelName);
    output.writeFieldEnd();
  }
  if (this.datetime !== null && this.datetime !== undefined) {
    output.writeFieldBegin('datetime', Thrift.Type.STRING, 5);
    output.writeString(this.datetime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 6);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.fromUserId !== null && this.fromUserId !== undefined) {
    output.writeFieldBegin('fromUserId', Thrift.Type.STRING, 7);
    output.writeString(this.fromUserId);
    output.writeFieldEnd();
  }
  if (this.fromUsername !== null && this.fromUsername !== undefined) {
    output.writeFieldBegin('fromUsername', Thrift.Type.STRING, 8);
    output.writeString(this.fromUsername);
    output.writeFieldEnd();
  }
  if (this.toUserId !== null && this.toUserId !== undefined) {
    output.writeFieldBegin('toUserId', Thrift.Type.STRING, 9);
    output.writeString(this.toUserId);
    output.writeFieldEnd();
  }
  if (this.toUsername !== null && this.toUsername !== undefined) {
    output.writeFieldBegin('toUsername', Thrift.Type.STRING, 10);
    output.writeString(this.toUsername);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

