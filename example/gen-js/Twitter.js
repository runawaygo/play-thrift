//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Twitter_ping_args = function(args) {
};
Twitter_ping_args.prototype = {};
Twitter_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_ping_args.prototype.write = function(output) {
  output.writeStructBegin('Twitter_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_ping_result = function(args) {
};
Twitter_ping_result.prototype = {};
Twitter_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_ping_result.prototype.write = function(output) {
  output.writeStructBegin('Twitter_ping_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_postTweet_args = function(args) {
  this.tweet = null;
  if (args) {
    if (args.tweet !== undefined) {
      this.tweet = args.tweet;
    }
  }
};
Twitter_postTweet_args.prototype = {};
Twitter_postTweet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tweet = new Tweet();
        this.tweet.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_postTweet_args.prototype.write = function(output) {
  output.writeStructBegin('Twitter_postTweet_args');
  if (this.tweet !== null && this.tweet !== undefined) {
    output.writeFieldBegin('tweet', Thrift.Type.STRUCT, 1);
    this.tweet.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_postTweet_result = function(args) {
  this.success = null;
  this.unavailable = null;
  if (args instanceof TwitterUnavailable) {
    this.unavailable = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.unavailable !== undefined) {
      this.unavailable = args.unavailable;
    }
  }
};
Twitter_postTweet_result.prototype = {};
Twitter_postTweet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.unavailable = new TwitterUnavailable();
        this.unavailable.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_postTweet_result.prototype.write = function(output) {
  output.writeStructBegin('Twitter_postTweet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.unavailable !== null && this.unavailable !== undefined) {
    output.writeFieldBegin('unavailable', Thrift.Type.STRUCT, 1);
    this.unavailable.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_searchTweets_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined) {
      this.query = args.query;
    }
  }
};
Twitter_searchTweets_args.prototype = {};
Twitter_searchTweets_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_searchTweets_args.prototype.write = function(output) {
  output.writeStructBegin('Twitter_searchTweets_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_searchTweets_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Twitter_searchTweets_result.prototype = {};
Twitter_searchTweets_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TweetSearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_searchTweets_result.prototype.write = function(output) {
  output.writeStructBegin('Twitter_searchTweets_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_zip_args = function(args) {
};
Twitter_zip_args.prototype = {};
Twitter_zip_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_zip_args.prototype.write = function(output) {
  output.writeStructBegin('Twitter_zip_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Twitter_zip_result = function(args) {
};
Twitter_zip_result.prototype = {};
Twitter_zip_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Twitter_zip_result.prototype.write = function(output) {
  output.writeStructBegin('Twitter_zip_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TwitterClient.prototype = {};
TwitterClient.prototype.ping = function(callback) {
  if (callback === undefined) {
    this.send_ping();
    this.recv_ping();
  } else {
    var postData = this.send_ping(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_ping);
  }
};

TwitterClient.prototype.send_ping = function(callback) {
  this.output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid);
  var args = new Twitter_ping_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TwitterClient.prototype.recv_ping = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Twitter_ping_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
TwitterClient.prototype.postTweet = function(tweet, callback) {
  if (callback === undefined) {
    this.send_postTweet(tweet);
    return this.recv_postTweet();
  } else {
    var postData = this.send_postTweet(tweet, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_postTweet);
  }
};

TwitterClient.prototype.send_postTweet = function(tweet, callback) {
  this.output.writeMessageBegin('postTweet', Thrift.MessageType.CALL, this.seqid);
  var args = new Twitter_postTweet_args();
  args.tweet = tweet;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TwitterClient.prototype.recv_postTweet = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Twitter_postTweet_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.unavailable) {
    throw result.unavailable;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'postTweet failed: unknown result';
};
TwitterClient.prototype.searchTweets = function(query, callback) {
  if (callback === undefined) {
    this.send_searchTweets(query);
    return this.recv_searchTweets();
  } else {
    var postData = this.send_searchTweets(query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_searchTweets);
  }
};

TwitterClient.prototype.send_searchTweets = function(query, callback) {
  this.output.writeMessageBegin('searchTweets', Thrift.MessageType.CALL, this.seqid);
  var args = new Twitter_searchTweets_args();
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

TwitterClient.prototype.recv_searchTweets = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Twitter_searchTweets_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'searchTweets failed: unknown result';
};
TwitterClient.prototype.zip = function(callback) {
  if (callback === undefined) {
    this.send_zip();
  } else {
    var postData = this.send_zip(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_zip);
  }
};

TwitterClient.prototype.send_zip = function(callback) {
  this.output.writeMessageBegin('zip', Thrift.MessageType.CALL, this.seqid);
  var args = new Twitter_zip_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
