/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef example_TYPES_H
#define example_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace thrift { namespace example {

struct TweetType {
  enum type {
    TWEET = 0,
    RETWEET = 2,
    DM = 10,
    REPLY = 11
  };
};

extern const std::map<int, const char*> _TweetType_VALUES_TO_NAMES;

typedef std::vector<class Tweet>  TweetList;


class Location {
 public:

  static const char* ascii_fingerprint; // = "EA2086D2BB14222991D7B0497DE7B58B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

  Location() : latitude(0), longitude(0) {
  }

  virtual ~Location() throw() {}

  double latitude;
  double longitude;

  void __set_latitude(const double val) {
    latitude = val;
  }

  void __set_longitude(const double val) {
    longitude = val;
  }

  bool operator == (const Location & rhs) const
  {
    if (!(latitude == rhs.latitude))
      return false;
    if (!(longitude == rhs.longitude))
      return false;
    return true;
  }
  bool operator != (const Location &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Location & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Location &a, Location &b);

typedef struct _Tweet__isset {
  _Tweet__isset() : loc(false), tweetType(true), language(true) {}
  bool loc;
  bool tweetType;
  bool language;
} _Tweet__isset;

class Tweet {
 public:

  static const char* ascii_fingerprint; // = "A4EB7C02BD6CA9CD27A1AF6A8EEDD810";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0xEB,0x7C,0x02,0xBD,0x6C,0xA9,0xCD,0x27,0xA1,0xAF,0x6A,0x8E,0xED,0xD8,0x10};

  Tweet() : userId(0), userName(), text(), tweetType((TweetType::type)0), language("english") {
    tweetType = (TweetType::type)0;

  }

  virtual ~Tweet() throw() {}

  int32_t userId;
  std::string userName;
  std::string text;
  Location loc;
  TweetType::type tweetType;
  std::string language;

  _Tweet__isset __isset;

  void __set_userId(const int32_t val) {
    userId = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
  }

  void __set_text(const std::string& val) {
    text = val;
  }

  void __set_loc(const Location& val) {
    loc = val;
    __isset.loc = true;
  }

  void __set_tweetType(const TweetType::type val) {
    tweetType = val;
    __isset.tweetType = true;
  }

  void __set_language(const std::string& val) {
    language = val;
    __isset.language = true;
  }

  bool operator == (const Tweet & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(text == rhs.text))
      return false;
    if (__isset.loc != rhs.__isset.loc)
      return false;
    else if (__isset.loc && !(loc == rhs.loc))
      return false;
    if (__isset.tweetType != rhs.__isset.tweetType)
      return false;
    else if (__isset.tweetType && !(tweetType == rhs.tweetType))
      return false;
    if (__isset.language != rhs.__isset.language)
      return false;
    else if (__isset.language && !(language == rhs.language))
      return false;
    return true;
  }
  bool operator != (const Tweet &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tweet & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Tweet &a, Tweet &b);

typedef struct _TweetSearchResult__isset {
  _TweetSearchResult__isset() : tweets(false) {}
  bool tweets;
} _TweetSearchResult__isset;

class TweetSearchResult {
 public:

  static const char* ascii_fingerprint; // = "46C5C2FACA4C2525DFC2B8B194906416";
  static const uint8_t binary_fingerprint[16]; // = {0x46,0xC5,0xC2,0xFA,0xCA,0x4C,0x25,0x25,0xDF,0xC2,0xB8,0xB1,0x94,0x90,0x64,0x16};

  TweetSearchResult() {
  }

  virtual ~TweetSearchResult() throw() {}

  TweetList tweets;

  _TweetSearchResult__isset __isset;

  void __set_tweets(const TweetList& val) {
    tweets = val;
  }

  bool operator == (const TweetSearchResult & rhs) const
  {
    if (!(tweets == rhs.tweets))
      return false;
    return true;
  }
  bool operator != (const TweetSearchResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TweetSearchResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TweetSearchResult &a, TweetSearchResult &b);

typedef struct _TwitterUnavailable__isset {
  _TwitterUnavailable__isset() : message(false) {}
  bool message;
} _TwitterUnavailable__isset;

class TwitterUnavailable : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TwitterUnavailable() : message() {
  }

  virtual ~TwitterUnavailable() throw() {}

  std::string message;

  _TwitterUnavailable__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const TwitterUnavailable & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const TwitterUnavailable &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TwitterUnavailable & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TwitterUnavailable &a, TwitterUnavailable &b);

}} // namespace

#endif
